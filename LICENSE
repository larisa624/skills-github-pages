<! DOCTYPE html>
<html lang="pt-BR">
<cabe√ßa>
 <meta charset="UTF-8"> 
 = visualiza√ß√£o" conte√∫do="largura de dispositivo, escala inicial=1.0"> 
 <t√≠tulo>Nosso Ca√ßa-Palavras</t√≠tulo> 
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #ff6f91, #ff9671);
      color: #fff;
      text-align: center;
      padding: 20px;
      overflow-x: hidden;
    }
    h1 {
      font-size: 2em;
      margin-bottom: 15px;
    }
    .hearts {
      font-size: 2em;
      margin: 10px 0;
    }
    table {
      margin: 0 auto;
      border-collapse: collapse;
    }
    td {
      width: 8vw;
      height: 8vw;
      max-width: 35px;
      max-height: 35px;
      border: 1px solid #fff;
      text-align: center;
      vertical-align: middle;
      cursor: pointer;
      background-color: rgba(255,255,255,0.2);
      font-size: 4vw;
      user-select: none;
    }
    td.selected {
      background-color: #fff;
      color: #ff6f91;
      font-weight: bold;
    }
    .word-list {
      margin-top: 15px;
      font-size: 1em;
      line-height: 1.5;
      max-width: 90%;
      margin-left: auto;
      margin-right: auto;
    }
    canvas {
      position: fixed;
      top: 0;
      left: 0;
      pointer-events: none;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <h1>Nosso Ca√ßa-Palavras</h1>
  <div class="hearts">‚ù§Ô∏èüíñüíïüíòüíù</div>
  <table id="wordsearch"></table>
  <div class="word-list" id="foundWords">
    <strong>Palavras:</strong><br>
    amor, infinitamente, farofa, terror, desenho, esmalte, novela, p√£ozinho, abelhinha, sun, moon, Harry Potter, Up Altas Aventuras, felicidade, evolu√ß√£o, for√ßa
  </div>

  <audio id="clickSound" src="https://cdn.pixabay.com/audio/2022/03/15/audio_4870d7aa98.mp3"></audio>

  <canvas id="confettiCanvas"></canvas>

  <script>
    const words = ['AMOR','INFINITAMENTE','FAROFA','TERROR','DESENHO','ESMALTE','NOVELA','P√ÉOZINHO','ABELHINHA','SUN','MOON','HARRYPOTTER','UPALTASAVENTURAS','FELICIDADE','EVOLU√á√ÉO','FOR√áA'];
    const gridSize = 15;
    const table = document.getElementById('wordsearch');
    const foundWords = new Set();
    const clickSound = document.getElementById('clickSound');
    let grid = Array(gridSize).fill().map(()=>Array(gridSize).fill(''));

    function playSound() {
      clickSound.currentTime = 0;
      clickSound.play();
    }

    function placeWord(word) {
      const dir = Math.random() > 0.5 ? 1 : -1;
      const vertical = Math.random() > 0.5;
      let placed = false;
      while (!placed) {
        let row = Math.floor(Math.random() * gridSize);
        let col = Math.floor(Math.random() * gridSize);
        let fits = true;
        for (let i = 0; i < word.length; i++) {
          let r = row + (vertical ? i * dir : 0);
          let c = col + (!vertical ? i * dir : 0);
          if (r < 0 || r >= gridSize || c < 0 || c >= gridSize || (grid[r][c] && grid[r][c] !== word[i])) {
            fits = false;
            break;
          }
        }
        if (fits) {
          for (let i = 0; i < word.length; i++) {
            let r = row + (vertical ? i * dir : 0);
            let c = col + (!vertical ? i * dir : 0);
            grid[r][c] = word[i];
          }
          placed = true;
        }
      }
    }

 palavras. Em cada um(w => placeWord(w. toUpperCase())); 

    for (let r = 0; r < gridSize; r++) {
      for (let c = 0; c < gridSize; c++) {
        if (!grid[r][c]) {
          grid[r][c] = String.fromCharCode(65 + Math.floor(Math.random() * 26));
        }
      }
    }

    for (let r = 0; r < gridSize; r++) {
      const row = document.createElement('tr');
      for (let c = 0; c < gridSize; c++) {
        const cell = document.createElement('td');
 c√©lula. Conte√∫do = grelha[r][c]; 
 celular, conjunto de dados. carta = grelha[r][c]; 
 cell. AddEventListener('click', () => { 
 celular. Lista de clandestinos('selecionados'); 
 playSound(); 
 verifica√ß√£o (conclus√£o) 
                    });            
 fila. appendCrian√ßa(c√©lula); 
      }
 mesa. appendCrian√ßa(fila); 
    }

 fun√ß√£o de verifica√ß√£o de verifica√ß√£o() { 
 conste selectedLetters = [... documento. querySelectorAll(. selecionado)]. mapa(td => td. Conte√∫do). Junte('); 
 palavras. Por cada uma(palavra => { 
 se (selectedLetters. inclui(palavra) & ! FundWords. tem(palavra) { 
 Palavras de foundidades. Adicione(palavra); 
        }
                                                       });                                                 
 se (palavras de base. tamanho >= palavras. comprimento) { 
 Confetti(); 
      }
    }

 // efeito confetti 
 tela de conste = documento. getElementById('confettiCanvas'); 
 conste x = tela. getContexto('2d'); 
 tela. largura = janela. IntnerWith; 
 tela. altura = janela. Alteza; 

 deixar confetes = []; 

 fun√ß√£o de lan√ßamento Confetti() {
